{"meta":{"title":"topbo","subtitle":"一个神奇的博客","description":"this is my private blog","author":"Xie Bo","url":"http://topbo.github.io"},"pages":[{"title":"关于本站","date":"2017-08-10T06:17:53.000Z","updated":"2017-08-10T06:19:48.226Z","comments":false,"path":"about/index.html","permalink":"http://topbo.github.io/about/index.html","excerpt":"","text":"Good site Good man","keywords":null},{"title":"Help","date":"2017-08-07T09:16:51.000Z","updated":"2017-08-08T02:42:13.373Z","comments":false,"path":"help/index.html","permalink":"http://topbo.github.io/help/index.html","excerpt":"","text":"这是一个帮助 可点击右上方太阳，更换主题。 可点击右上方微信，扫博主微信寻求帮助。 可以点击博主GitHub账户，查询源代码。","keywords":null},{"title":"劲爆世界","date":"2017-08-08T02:29:41.000Z","updated":"2017-08-08T02:44:00.987Z","comments":false,"path":"crossfire/index.html","permalink":"http://topbo.github.io/crossfire/index.html","excerpt":"","text":"还在等什么 出发吧","keywords":null},{"title":"tags","date":"2017-08-07T09:15:27.000Z","updated":"2017-08-07T09:20:50.637Z","comments":true,"path":"tags/index.html","permalink":"http://topbo.github.io/tags/index.html","excerpt":"","text":""},{"title":"视频资源","date":"2017-08-07T09:15:56.000Z","updated":"2017-08-08T06:35:26.511Z","comments":false,"path":"video/index.html","permalink":"http://topbo.github.io/video/index.html","excerpt":"","text":"资源大合集","keywords":null},{"title":"链接","date":"2017-08-07T09:17:02.000Z","updated":"2017-08-08T06:36:07.002Z","comments":false,"path":"links/index.html","permalink":"http://topbo.github.io/links/index.html","excerpt":"","text":"Thanks everyone","keywords":null}],"posts":[{"title":"笔试题大合集（一）","slug":"bishi","date":"2017-09-21T03:08:18.000Z","updated":"2017-10-13T04:12:01.492Z","comments":true,"path":"2017/09/21/bishi/","link":"","permalink":"http://topbo.github.io/2017/09/21/bishi/","excerpt":"","text":"cvte 填空 简答 编程 填空 visibility属性 简答题 跨域的几种方式 前端安全 两边定宽，中间自适应几种方式 移动端slide组件注意什么 编程题 数组查找 indexOf() 汉字两个字节 输入 “我zi” 3 返回”我z” charCodeAt substr() substring(a,b) 一个对象仿数组的pop push 有一个length属性 查询 链家 10道编程 现场笔试 去哪儿 BFC 羊生羊 模块搜索 360 40道单选 游乐园树上的旅行跳高游戏有赞编程题 矩阵 小源科技 如何对网站的文件和资源进行优化 cSS引入方式及优缺点 字符串中出现最多的字符 并统计出次数 电话 邮箱 验证 实现一个登录表单 ajax post timeout 面试 margin auto http post get window.location 跨域 json数据格式 美丽联合 css有哪些块级元素和行内元素 css新增伪类 json和xml的区别 四种http缓存 倒计时插件 可复用 有样式 setTimeout(function(){},0) for(){}问题 网龙","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"大四找工作笔试面试","slug":"dasi","date":"2017-09-15T11:50:40.000Z","updated":"2017-09-24T08:57:10.113Z","comments":true,"path":"2017/09/15/dasi/","link":"","permalink":"http://topbo.github.io/2017/09/15/dasi/","excerpt":"","text":"大四了，现在放在第一位的就是找到心满意足的工作。加油！作为一名小小的前端工程师，正在投简历，笔试…在这里记下，那些考过的知识点。 HTML5HTML5中有趣的标签标签语义化有利于SEO，让你的代码可读性大大提高。 HTML5中新增的API 地理位置 历史记录管理 跨域消息传递postMessage Web Worker 类型化数组 和 ArrayBuffer Blob 文件系统API 客户端数据库 WebSocket CSS 隐藏，但是位置还在的属性。visibility 首字母大写text-transform: capitalize; 清除浮动的几种方式及优缺点1.overflow:hidden2.clear:both3.after伪类 1234567891011.clearfix:after&#123; centent:\"\";//设置内容为空 height:0;//高度为0 line-height:0;//行高为0 display:block;//将文本转为块级元素 visibility:hidden;//将元素隐藏 clear:both//清除浮动 &#125; .clearfix&#123; zoom:1;为了兼容IE &#125; 4.双伪类 12345678.clearfix:before,.clearfix:after &#123; content: \"\"; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; 两边定宽，中间自适应几种方式1.两边顶宽，中间auto参考链接圣杯布局和双飞翼布局 box-sizing响应式布局（媒体查询）flex布局 流式布局（百分比布局） grid布局JS同源与跨域什么是同源？限制从一个源加载的文档或脚如何与来自另一个源的资源进行交互一个源指的是主机名、协议和端口号的组合，必须相同 跨域的几种方式window.namedocument.domainjsonp 利用script标签向服务端传一个回调函数CORS(跨域资源共享)window.postmessagelocation.hashWebSocketnginx代理跨域nodejs中间件代理跨域 原型与继承继承与原型链原型是什么原型就是一个普通的对象，每个对象都有一个原型（Object除外），原型能存储我们的方法，构造函数创建出来的实例对象能够引用原型中的方法。查看原型以前一般使用对象的__proto__属性，ES6推出后，推荐用Object.getPrototypeOf()方法来获取对象的原型 闭包闭包是什么？阮一峰闭包专业说法：当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。 还可以这么理解：闭包就是一个具有封闭功能与包裹功能的结构，是为了实现具有私有访问空间的函数的，函数可以构成闭包，因为函数内部定义的数据函数外部无法访问，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函数可以构成闭包。创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量闭包的特性闭包有三个特性： 函数嵌套函数函数内部可以引用外部的参数和变量参数和变量不会被垃圾回收机制回收闭包有什么用，使用场景当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。 闭包的缺点闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。 函数套函数就是闭包吗？不是！，当一个内部函数被其外部函数之外的变量引用时，才会形成了一个闭包。 this参考链接 call、apply和bindcall和apply都是改变上下文中的this并立即执行这个函数，bind方法可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加，这是它们的区别，根据自己的实际情况来选择使用。参考链接 如何进行错误监控分类 即时运行错误（代码错误） 资源加载错误错误的捕获方式即时运行错误的捕获方式： try…catchwindow.onerror 资源加载错误： object.onerror（如img,script）performance.getEntries()Error事件捕获 创建对象的三种方式 字面量 构造函数 Object.create() 回流和重绘《如何能写出高性能DOM？》 数组去重123function removeRepeatArray(val)&#123; return Array.from(new Set(val));&#125; 数组去重参考链接 深拷贝与浅拷贝是什么浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。实现浅拷贝1234567var obj1 = &#123; a: 10, b: 20, c: 30 &#125;;var obj2 = obj1;obj2.b = 100;console.log(obj1);// &#123; a: 10, b: 100, c: 30 &#125; &lt;-- b 被改到了console.log(obj2);// &#123; a: 10, b: 100, c: 30 &#125; 实现深拷贝1234567var obj1 = &#123; a: 10, b: 20, c: 30 &#125;;var obj2 = &#123; a: obj1.a, b: obj1.b, c: obj1.c &#125;;obj2.b = 100;console.log(obj1);// &#123; a: 10, b: 20, c: 30 &#125; &lt;-- b 沒被改到console.log(obj2);// &#123; a: 10, b: 100, c: 30 &#125; 深拷贝实现方式 手动复制方式，如上面的代码，缺点就是 Object.assign，ES6 的新函数，可以帮助我们达成跟上面一样的功能。 obj1 = { a: 10, b: 20, c: 30 }; obj2 = Object.assign({}, obj1); obj2.b = 100; console.log(obj1); // { a: 10, b: 20, c: 30 } &lt;– 沒被改到 console.log(obj2); // { a: 10, b: 100, c: 30 } 转成 JSON 再转回来用JSON.stringify把对象转成字符串，再用JSON.parse把字符串转成新的对象。 缺点：只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。 jquery，有提供一个$.extend可以用来做 Deep Copy。 lodash，也有提供_.cloneDeep用来做 Deep Copy。 递归实现深拷贝1234567891011function clone( o ) &#123; var temp = &#123;&#125;; for( var k in o ) &#123; if( typeof o[ k ] == 'object' )&#123; temp[ k ] = clone( o[ k ] ); &#125; else &#123; temp[ k ] = o[ k ]; &#125; &#125; return temp;&#125; 判断一个变量12345678910111213 var a = []; // 1.基于instanceof a instanceof Array; // 2.基于constructor a.constructor === Array; // 3.基于Object.prototype.isPrototypeOf Array.prototype.isPrototypeOf(a); // 4.基于getPrototypeOf Object.getPrototypeOf(a) === Array.prototype; // 5.基于Object.prototype.toString Object.prototype.toString.apply(a) === '[object Array]';// 6.Array.isArrayArray.isArray([]); // true 浏览器兼容问题浏览器渲染原理 浏览器渲染原理及流程 前端路由的实现原理什么是路由？简单的说，路由是根据不同的 url 地址展示不同的内容或页面 使用场景？前端路由更多用在单页应用上, 也就是SPA, 因为单页应用, 基本上都是前后端分离的, 后端自然也就不会给前端提供路由。 前端的路由和后端的路由在实现技术上不一样，但是原理都是一样的。在 HTML5 的 history API 出现之前，前端的路由都是通过 hash 来实现的，hash 能兼容低版本的浏览器。 两种实现前端路由的方式HTML5 History两个新增的API：history.pushState 和 history.replaceState，两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。 Hash就是url 中看到 # ,我们需要一个根据监听哈希变化触发的事件( hashchange) 事件。我们用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。 优点从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升更过参考这里缺点使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。 移动端开发移动端slide组件应该考虑什么 前端安全XSS（跨站脚本攻击）CSRF（跨站请求伪造）HTTP劫持界面操作劫持DOM事件DOM事件的级别 DOM0，element.onclick = function(){} DOM2，element.addEventListener(‘click’, function(){}, false); DOM事件模型是什么：指的是冒泡和捕获DOM事件流是什么：捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段描述DOM事件捕获的具体流程window –&gt; document –&gt; documentElement(html标签) –&gt; body –&gt; …. –&gt; 目标对象Event对象常见应用 event.preventDefault()，阻止默认行为 event.stopPropagation()，阻止事件冒泡 event.stopImmediatePropagation()，阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上，这个方法不接受任何参数。 event.currentTarget，返回绑定事件的元素 event.target，返回触发事件的元素如何自定义事件Event，不能传递参数 12345var eve = new Event('自定义事件名'); ev.addEventListener('自定义事件名', function()&#123; console.log('自定义事件') &#125;); ev.dispatchEvent(eve); CustomEvent,还可以指定参数 性能优化 雪碧图 css sprite 如何快速合并雪碧图 Gulp：gulp-css-spriter webpack：optimize-css-assets-webpack-plugin Go！Png 在线工具 静态资源CDN 移动端响应式图片 减少DOM操作 减少HTTP请求 HTML使用语义化标签 减少iframe 避免重定向 使用CSS不滥用字体，浮动。选择器性能优化，避免使用表达式，避免用id写样式 减少js重复代码 尾调用优化 尾递归优化（只在严格模式下生效） 压缩JS和CSS、HTML等代码 DNS预解析 meta link 标签 使用json进行数据交换 使用HTTP缓存 添加Expires 或 Cache-control信息头彻底弄懂HTTP缓存机制及原理 HTTPSES6/7let const块作用域暂时性死区 箭头函数解构赋值字符串 正则 数值 数组 函数 对象的扩展Symbol二进制数组Proxy ReflectSet Map 数据结构Iterator 和 for… of 循环GeneratorPromiseasync awaitClass修饰器模块开发ES6参考链接 VueGitGit命令常用git操作 WebpackNodeRestful API具体参考阮一峰的博客参考链接 微信小程序","categories":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/categories/live/"}],"tags":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/tags/live/"}],"keywords":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/categories/live/"}]},{"title":"王者钻石选手","slug":"wangzhe","date":"2017-09-15T11:19:45.000Z","updated":"2017-09-15T11:36:11.793Z","comments":true,"path":"2017/09/15/wangzhe/","link":"","permalink":"http://topbo.github.io/2017/09/15/wangzhe/","excerpt":"","text":"Love 香香 的 钻5 菜菜最近一直在玩孙尚香，也在给香香积攒铭文。 没人气的家伙，不值得浪费炮火 —霸道的孙尚香","categories":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}],"tags":[{"name":"王者","slug":"wangzhe","permalink":"http://topbo.github.io/tags/wangzhe/"}],"keywords":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}]},{"title":"阿里云服务器nginx配置","slug":"nginx","date":"2017-09-15T04:04:54.000Z","updated":"2017-09-15T12:22:56.324Z","comments":true,"path":"2017/09/15/nginx/","link":"","permalink":"http://topbo.github.io/2017/09/15/nginx/","excerpt":"","text":"备案的网站终于好了，于是很激动的开始开发小程序。却发现请求服务器域名必须https，于是开始踩坑。在阿里云上申请SSL，下载都没什么问题。 主要是xshell5和xftp 和本地文件上传远程服务器花了些时间最终解决 xshell sftp传输文档 还有主要卡在了nginx.conf配置文件的https server ssl 配置写好无法重新启动，在原有nginx基础上下载添加模块不行。最终卸载nginx重新安装nginx时添加–with-http_ssl_module 以及在阿里云上设置安全组开放443端口解决问题。 配置nginx反向代理参考链接1 配置nginx https参考链接2","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"node","slug":"node","permalink":"http://topbo.github.io/tags/node/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"微信小程序初探","slug":"weinxin","date":"2017-09-05T01:41:56.000Z","updated":"2017-09-15T11:44:32.564Z","comments":true,"path":"2017/09/05/weinxin/","link":"","permalink":"http://topbo.github.io/2017/09/05/weinxin/","excerpt":"","text":"微信小程序是否使用wepy框架开发 想法idea谁没几张照骗用户提供照骗，以及自己想要的效果。我们帮他们P图，用户可以对我们的P图进行评分。打赏，点赞等等。你提供照骗我们帮P并建议如何能拍出更好的照骗。从此走进高逼格的朋友圈，妈妈再也不用担心我拍的图太丑了。你提供创意，我们实现。让大家能重新认识你。","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"开发","slug":"develop","permalink":"http://topbo.github.io/tags/develop/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"阿里云学生服务器(ESC Centos7.3)初探","slug":"aliyun","date":"2017-08-21T08:30:31.000Z","updated":"2017-09-05T01:51:02.794Z","comments":true,"path":"2017/08/21/aliyun/","link":"","permalink":"http://topbo.github.io/2017/08/21/aliyun/","excerpt":"","text":"购买 这就不多说了，说了后悔。 使用 Centos7.3 使用过程中有太多的坑需要踩 一开始配合阿里云的帮助文档以及百度搜索服务器的搭建进行安装，中间出现了很多问题。 最终安装了图形化界面 nodejs mongodb 以及本地安装Xshell5 博主继续踩坑… 早日将服务器玩转，拥有自己的网站，微信小程序。","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"其它","slug":"other","permalink":"http://topbo.github.io/tags/other/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"Vue服务端渲染(SSR)","slug":"vuessr","date":"2017-08-16T07:03:40.000Z","updated":"2017-09-05T01:51:20.763Z","comments":true,"path":"2017/08/16/vuessr/","link":"","permalink":"http://topbo.github.io/2017/08/16/vuessr/","excerpt":"","text":"Vue服务端渲染(SSR)SSR流程图","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://topbo.github.io/tags/vue/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"express框架之session","slug":"session","date":"2017-08-14T06:48:24.000Z","updated":"2017-09-05T01:53:04.894Z","comments":true,"path":"2017/08/14/session/","link":"","permalink":"http://topbo.github.io/2017/08/14/session/","excerpt":"","text":"express框架之session 数据库存储express框架提供了针对mongodb的中间件：connect-mongo，我们只需在挂载session的时候在options中传入mongodb的参数即可，程序运行的时候, express app 会自动的替我们管理session的存储，更新和删除。具体可以参考：github地址 123456789app.use(express.session(&#123; secret: 'keyboard cat', saveUninitialized: false, // don't create session until something stored resave: false, //don't save session if unmodified store: new MongoStore(&#123; url: 'mongodb://localhost/test-app', touchAfter: 24 * 3600 // time period in seconds &#125;)&#125;));","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"node","slug":"node","permalink":"http://topbo.github.io/tags/node/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"王者荣耀上分心得","slug":"wangzhe","date":"2017-08-10T03:14:06.000Z","updated":"2017-09-05T01:52:52.943Z","comments":true,"path":"2017/08/10/wangzhe/","link":"","permalink":"http://topbo.github.io/2017/08/10/wangzhe/","excerpt":"","text":"王者荣耀上分心得 不要怂就是干！！ 有事没事问度娘","categories":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}],"tags":[{"name":"王者","slug":"wangzhe","permalink":"http://topbo.github.io/tags/wangzhe/"}],"keywords":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}]},{"title":"webpack的使用","slug":"webpack","date":"2017-08-10T02:16:04.000Z","updated":"2017-09-05T01:52:59.873Z","comments":true,"path":"2017/08/10/webpack/","link":"","permalink":"http://topbo.github.io/2017/08/10/webpack/","excerpt":"","text":"WebPack为前端开发带来了什么 模块化 E6/7新特性的转化 Scss、less等CSS预处理器 … WebPack是什么主要用来模块打包：它所需要做的就是，分析你的项目结构，找到javascript模块以及一些浏览器无法直接运行的拓展语言及vue等前端框架，将其打包为合适的格式提供浏览器使用。 WebPack的工作方式 WebPack的工作方式 Grunt和Gulp的工作方式 Grunt和Gulp的工作方式 开始使用WebPack安装","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"工具","slug":"tool","permalink":"http://topbo.github.io/tags/tool/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"node中的mongoose使用方法","slug":"mongoose","date":"2017-08-08T06:46:50.000Z","updated":"2017-09-15T11:46:27.927Z","comments":true,"path":"2017/08/08/mongoose/","link":"","permalink":"http://topbo.github.io/2017/08/08/mongoose/","excerpt":"","text":"mongoosemongoose官网","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"数据库","slug":"db","permalink":"http://topbo.github.io/tags/db/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"mongodb数据库的应用","slug":"database","date":"2017-08-08T06:39:34.000Z","updated":"2017-09-15T11:49:59.331Z","comments":true,"path":"2017/08/08/database/","link":"","permalink":"http://topbo.github.io/2017/08/08/database/","excerpt":"","text":"mongodb导入导出jsonimport json file1mongoimport --db &lt;database-name&gt; --collection &lt;collection-name&gt; --file input.json export json file1mongoexport --db &lt;database-name&gt; --collection &lt;collection-name&gt; --out output.json","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"数据库","slug":"db","permalink":"http://topbo.github.io/tags/db/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"gulp使用指南","slug":"tool","date":"2017-08-08T01:24:32.000Z","updated":"2017-09-05T01:52:44.729Z","comments":true,"path":"2017/08/08/tool/","link":"","permalink":"http://topbo.github.io/2017/08/08/tool/","excerpt":"","text":"前端自动化构建工具常用插件gulp-uglify js压缩 安装1npm install --save-dev gulp-uglify 使用方法12345678910111213var gulp = require('gulp');var uglify = require('gulp-uglify');var pump = require('pump'); gulp.task('compress', function (cb) &#123; pump([ gulp.src('lib/*.js'), uglify(), gulp.dest('dist') ], cb );&#125;); 额外介绍一下 pump 他能解决什么？在你使用标准的source.pipe(dest)的时候，如果dest发出关闭或一个错误，源 不会被破坏。你也不能提供一个回调来告诉管道何时完成。pump 做了这两件事 安装1npm install pump 使用方法12345678910111213var pump = require('pump')var fs = require('fs') var source = fs.createReadStream('/dev/random')var dest = fs.createWriteStream('/dev/null') pump(source, dest, function(err) &#123; console.log('pipe finished', err)&#125;) setTimeout(function() &#123; dest.destroy() // when dest is closed pump will destroy source &#125;, 1000) 你也可以使用pump 超过两个管道流12345var transform = someTransformStream() pump(source, transform, anotherTransform, dest, function(err) &#123; console.log('pipe finished', err)&#125;) gulp-less安装1npm install gulp-less 使用方法12345678910var less = require('gulp-less');var path = require('path'); gulp.task('less', function () &#123; return gulp.src('./less/**/*.less') .pipe(less(&#123; paths: [ path.join(__dirname, 'less', 'includes') ] &#125;)) .pipe(gulp.dest('./public/css'));&#125;);","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"工具","slug":"tool","permalink":"http://topbo.github.io/tags/tool/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"想要怎样的生活","slug":"mmd","date":"2017-08-07T07:36:15.000Z","updated":"2017-09-05T01:52:15.914Z","comments":true,"path":"2017/08/07/mmd/","link":"","permalink":"http://topbo.github.io/2017/08/07/mmd/","excerpt":"","text":"我想要的生活 有房 有车 旅游 摄影 健身 游泳 猫咪 girl","categories":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/categories/live/"}],"tags":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/tags/live/"}],"keywords":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/categories/live/"}]},{"title":"vue项目实战中遇到的问题","slug":"something","date":"2017-08-07T07:24:05.000Z","updated":"2017-09-05T01:52:21.470Z","comments":true,"path":"2017/08/07/something/","link":"","permalink":"http://topbo.github.io/2017/08/07/something/","excerpt":"","text":"","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://topbo.github.io/tags/vue/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"变量的解构赋值","slug":"value","date":"2017-08-07T06:40:39.000Z","updated":"2017-09-05T01:52:26.333Z","comments":true,"path":"2017/08/07/value/","link":"","permalink":"http://topbo.github.io/2017/08/07/value/","excerpt":"","text":"变量的解构赋值用途1.交换变量的值1[x, y] = [y, x]; 上面代码交换变量x和y的值，这样的写法不仅简介，而且易读 ，语义非常清晰。 2.从函数返回多个返回值函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。12345678910111213// 返回一个数组function example()&#123; return [1,2,3];&#125;var [a,b,c] = example();// 返回一个对象function example()&#123; return &#123; foo: 1, bat: 2 &#125;;&#125;var &#123; foo, bat &#125; = example(); 3.函数参数名的定义结构赋值可以方便地将一组参数与变量名对应起来12345678910//参数是一组有次序的值function f([x,y,z])&#123; ...&#125;f([1,2,3]);//参数是一组无次序的值function f(&#123;x,y,z&#125;)&#123; ...&#125;f(&#123;z:3, y:2, x:1&#125;);","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"js","slug":"javascript","permalink":"http://topbo.github.io/tags/javascript/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]},{"title":"部落冲突游戏心得","slug":"coc","date":"2017-07-28T08:51:46.000Z","updated":"2017-09-05T01:51:52.389Z","comments":true,"path":"2017/07/28/coc/","link":"","permalink":"http://topbo.github.io/2017/07/28/coc/","excerpt":"","text":"那些年部落带给我的东西玩这个游戏快三年了，风风雨雨走来。也见证了部落的兴衰，体会到了部落战的激情与懊恼。 为了部落！","categories":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}],"tags":[{"name":"部落冲突","slug":"coc","permalink":"http://topbo.github.io/tags/coc/"}],"keywords":[{"name":"游戏","slug":"game","permalink":"http://topbo.github.io/categories/game/"}]},{"title":"设计师的修养","slug":"design","date":"2017-07-28T08:51:31.000Z","updated":"2017-09-15T11:18:20.057Z","comments":true,"path":"2017/07/28/design/","link":"","permalink":"http://topbo.github.io/2017/07/28/design/","excerpt":"","text":"设计师的修养想成为一名优秀的设计师，醒醒吧，别做梦了！","categories":[{"name":"设计","slug":"design","permalink":"http://topbo.github.io/categories/design/"}],"tags":[{"name":"生活","slug":"live","permalink":"http://topbo.github.io/tags/live/"}],"keywords":[{"name":"设计","slug":"design","permalink":"http://topbo.github.io/categories/design/"}]},{"title":"Node开发中遇到的问题（一）","slug":"node","date":"2017-07-28T08:44:24.000Z","updated":"2017-09-15T11:49:15.250Z","comments":true,"path":"2017/07/28/node/","link":"","permalink":"http://topbo.github.io/2017/07/28/node/","excerpt":"","text":"node 深入浅出node express koa","categories":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}],"tags":[{"name":"node","slug":"node","permalink":"http://topbo.github.io/tags/node/"}],"keywords":[{"name":"后台","slug":"server-side","permalink":"http://topbo.github.io/categories/server-side/"}]},{"title":"Vue开发中遇到的问题（一）","slug":"vue","date":"2017-07-28T08:31:32.000Z","updated":"2017-09-05T01:52:10.782Z","comments":true,"path":"2017/07/28/vue/","link":"","permalink":"http://topbo.github.io/2017/07/28/vue/","excerpt":"","text":"Vuevue-cli webpack proxyTable配置解决跨域问题12345678910proxyTable: &#123; '/api': &#123; target: 'http://127.0.0.1:3000', changeOrigin: true, pathRewrite: &#123; '^/api': '/api' &#125; &#125; &#125;","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://topbo.github.io/tags/vue/"}],"keywords":[{"name":"前端","slug":"big-front-end","permalink":"http://topbo.github.io/categories/big-front-end/"}]}]}